#+TITLE: FTW: A Web Server

We all need to be served.

* Usage 

#+BEGIN_SRC scheme
  (add-load-path "~/src/ftw/gerbil/")
  (import :ftw/server :clan/utils/base
          :std/net/httpd :std/net/request :std/generic)

  (defclass (test ftw-server)
    (404-message))

  (defmethod (ftw-server-handler (test test))
    (位 (req res)
      (http-response-write
       res 404 '(("Content-Type" . "text/plain"))
       (string-append "This: " (test-404-message test)))))

  (def server (make-test 404-message: "yay!"))

  (start-ftw-server! server)
  (stop-ftw-server! server)
#+END_SRC

* It's classy! 

In the end, the ~ftw-server~ is just a class. It contains the address
of the httpd itself, and the httpd itself.

#+NAME: defclass-ftw-server
#+BEGIN_SRC scheme
  (defclass ftw-server 
    (address httpd))
#+END_SRC

* The Generic Handler
  :PROPERTIES:
  :CUSTOM_ID: ftw_server_handler
  :END:


The server handler returns a function that, when passed the request
and the response, handles the details of responding to the client.

#+NAME: ftw-server-handler
#+BEGIN_SRC scheme
  (defgeneric ftw-server-handler
    (位 (self)
      (位 (req res)
      (http-response-write
         res 404 '(("Content-Type" . "text/plain"))
         "these aren't the droids you are looking for.\n"))))
#+END_SRC

* Starting and Stopping

 We'll have a default address. This is mostly to make testing easier,
 and feel free to set it to whatever your heart desires.

#+NAME: default-ftw-server-address
#+BEGIN_SRC scheme
(def default-ftw-server-address
 "localhost:8042")
#+END_SRC

Then we'll start it, and set the default ~mux~ to one that calls our
generic.

#+NAME: start/stop
#+BEGIN_SRC scheme
  (def (start-ftw-server! ftw-server)

    (unless (ftw-server-address ftw-server)
      (set! (ftw-server-address ftw-server)
        default-ftw-server-address))
    
    (def httpd (start-http-server!
                (ftw-server-address ftw-server)
                mux: (make-default-http-mux
                      (位 (req res)
                        ((ftw-server-handler ftw-server) req res)))))
      (set! (ftw-server-httpd ftw-server) httpd)
      httpd)

  (def (stop-ftw-server! server)
    (stop-http-server! (ftw-server-httpd server)))
#+END_SRC


* The server.ss file

In the end(point), we need a web server. There is a struct,
~ftw-server~, that we can build on.


#+BEGIN_SRC scheme :padline no :noweb yes :tangle "../gerbil/ftw/server.ss"
  ;; -*- Gerbil -*-
  package: ftw
  (export #t)
  (import :clan/utils/base :std/net/httpd :std/net/address
          :std/generic)

  <<defclass-ftw-server>>

  <<ftw-server-handler>>

  <<default-ftw-server-address>>

  <<start/stop>>
#+END_SRC

